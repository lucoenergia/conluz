services:

  postgres:
    image: postgres:16
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
    volumes:
      - ${PATH_TO_POSTGRES_DATA}:/var/lib/postgresql/data # Get a backup locally
      - ./conluz-postgres-init.sh:/docker-entrypoint-initdb.d/conluz-postgres-init.sh  # Mount the init.sql script
    restart: always
    networks:
      - conluz_network

  influxdb:
    image: influxdb:1.8
    container_name: influxdb
    ports:
      - "8086:8086"
    environment:
      - INFLUXDB_HTTP_AUTH_ENABLED=true
      - INFLUXDB_ADMIN_USER
      - INFLUXDB_ADMIN_PASSWORD
      - INFLUXDB_CONLUZ_USER
      - INFLUXDB_CONLUZ_USER_PASSWORD
    volumes:
      - ${PATH_TO_INFLUXDB_DATA}:/var/lib/influxdb
      - ./conluz-influxdb-init.sh:/docker-entrypoint-initdb.d/conluz-influxdb-init.sh
    restart: always
    networks:
      - conluz_network

  influxdb3:
    image: influxdb:3.0
    container_name: influxdb3
    ports:
      - "8087:8086"
    environment:
      - INFLUXD_LOG_LEVEL # Controls logging verbosity
      - INFLUXD_HTTP_BIND_ADDRESS # HTTP API bind address
      - INFLUX_SETUP_USERNAME # Admin username for initial setup
      - INFLUX_SETUP_PASSWORD # Admin password for initial setup
      - INFLUX_SETUP_ORG # Organization name (InfluxDB 3 uses orgs instead of databases)
      - INFLUX_SETUP_BUCKET # Initial bucket name (InfluxDB 3 uses buckets instead of databases)
      - INFLUX_SETUP_RETENTION # Retention policy for the bucket
      - INFLUX_SETUP_TOKEN # API token for authentication (InfluxDB 3 uses token-based auth)
    volumes:
      - ${PATH_TO_INFLUXDB3_DATA}:/var/lib/influxdb3
    restart: always
    networks:
      - conluz_network

  conluz:
    container_name: conluz
#    image: conluz:latest
    build:
      context: .. # The context defines the directory where your application code resides and the Docker daemon executes the build commands within that context.
      dockerfile: Dockerfile # The dockerfile key points to the Dockerfile that should be used for building the image.
    ports:
      - "8443:8443"
      - "5005:5005"
    # Create a .env file in the folder where this file is located and define the environment variables there.
    # When run docker-compose up, Docker will automatically pick up the .env file in the same directory as this docker-compose.yml file, and substitute the values of the environment variables accordingly.
    environment:
      - CONLUZ_JWT_SECRET_KEY
      - SPRING_DATASOURCE_URL
      - SPRING_INFLUXDB_URL
      - SPRING_INFLUXDB_USERNAME
      - SPRING_INFLUXDB_PASSWORD
      - INFLUXDB_ADMIN_USER
      - INFLUXDB_ADMIN_PASSWORD
      - SPRING_INFLUXDB_DATABASE
      - CONLUZ_MQTT_SERVER_PASSWORD
      - CONLUZ_MQTT_SERVER_TOPICS
      - CONLUZ_MQTT_SERVER_URI
      - CONLUZ_MQTT_SERVER_USERNAME
      # Uncomment this to enable remote debugging
#      - JAVA_TOOL_OPTIONS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005
    restart: always
    networks:
      - conluz_network
    depends_on:
      - influxdb
      - postgres

  promtail:
    image: grafana/promtail:3.0.01
    container_name: promtail
    ports:
      - "3110:3110"
    volumes:
      - ./promtail/config:/etc/promtail
      - /var/run/docker.sock:/var/run/docker.sock  # Required to let promtail access Docker API
    command: -config.file=/etc/promtail/local-config.yaml
    networks:
      - conluz_network
    depends_on:
      - loki
  loki:
    image: grafana/loki:3.0.0
    container_name: loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./loki/config:/etc/loki
    networks:
      - conluz_network

#  prometheus:
#    image: prom/prometheus:latest
#    container_name: prometheus
#    volumes:
#      - ./prometheus.yml:/etc/prometheus/prometheus.yml
#      - ${PATH_TO_PROMETHEUS_DATA}:/prometheus
#    command:
#      - --config.file=/etc/prometheus/prometheus.yml
#    ports:
#      - 9090:9090
#    restart: always

#  node-exporter:
#    image: prom/node-exporter:latest
#    container_name: node-exporter
#    volumes:
#      - /proc:/host/proc:ro
#      - /sys:/host/sys:ro
#      - /:/rootfs:ro
#    command:
#      - --path.procfs=/host/proc
#      - --path.sysfs=/host/sys
#      - --path.rootfs=/rootfs
#    restart: always

  telegraf:
    image: telegraf:latest
    container_name: telegraf
    environment:
      - SPRING_INFLUXDB_URL
      - SPRING_INFLUXDB_USERNAME
      - SPRING_INFLUXDB_PASSWORD
      - SPRING_INFLUXDB_DATABASE
      - INFLUXDB_ADMIN_USER
      - INFLUXDB_ADMIN_PASSWORD
      - CONLUZ_MQTT_SERVER_TOPIC_PREFIX
      - CONLUZ_MQTT_SERVER_URI
      - CONLUZ_MQTT_SERVER_USERNAME
      - CONLUZ_MQTT_SERVER_PASSWORD
    depends_on:
      - influxdb
    volumes:
      - ./telegraf.conf:/etc/telegraf/telegraf.conf
    restart: unless-stopped
    networks:
      - conluz_network

volumes:
  conluz-logs:

networks:
  conluz_network:
    driver: bridge